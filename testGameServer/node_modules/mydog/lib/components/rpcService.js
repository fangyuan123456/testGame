"use strict";
/**
 * rpc connection management, sending rpc messages
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcError = exports.handleMsgAwait = exports.rpcOnNewSocket = exports.init = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const define = require("../util/define");
const appUtil = __importStar(require("../util/appUtil"));
let app;
let msgHandler = {};
let rpcId = 1; // Must start from 1, not 0
let rpcRequest = {};
let rpcTimeMax = 10 * 1000; //overtime time
let outTime = 0; // Current time + timeout
let msgQueueDic = {};
let msgCacheCount = 5000;
let errStack = false;
/**
 * init
 * @param _app
 */
function init(_app) {
    app = _app;
    let rpcConfig = app.someconfig.rpc || {};
    let rpcMsgCacheCount = parseInt(rpcConfig.rpcMsgCacheCount);
    if (rpcMsgCacheCount >= 0) {
        msgCacheCount = rpcMsgCacheCount;
    }
    let timeout = Number(rpcConfig.timeout) || 0;
    if (timeout >= 5) {
        rpcTimeMax = timeout * 1000;
    }
    if (rpcConfig.errStack) {
        errStack = true;
    }
    outTime = Date.now() + rpcTimeMax;
    setInterval(() => {
        outTime = Date.now() + rpcTimeMax;
    }, 100);
    setInterval(checkTimeout, 2000);
    new rpc_create();
}
exports.init = init;
function rpcOnNewSocket(sid) {
    let queue = msgQueueDic[sid];
    if (!queue) {
        return;
    }
    delete msgQueueDic[sid];
    for (let one of queue) {
        sendTo(sid, one.rpcTimeout, one.buf);
    }
}
exports.rpcOnNewSocket = rpcOnNewSocket;
/**
 * Process rpc messages
 *
 *     [1]         [1]      [...]    [...]
 *   msgType    rpcBufLen   rpcBuf   msgBuf
 */
async function handleMsgAwait(sid, bufAll) {
    let rpcBufLen = bufAll.readUInt8(1);
    let rpcMsg = JSON.parse(bufAll.slice(2, 2 + rpcBufLen).toString());
    let msg = JSON.parse(bufAll.slice(2 + rpcBufLen).toString());
    if (!rpcMsg.cmd) {
        let timeout = rpcRequest[rpcMsg.id];
        if (timeout) {
            delete rpcRequest[rpcMsg.id];
            if (rpcMsg.err) {
                if (timeout.rpcErr) {
                    timeout.rpcErr.setMsg("rpcError" /* e_awaitRpcErrType.error */);
                    timeout.reject(timeout.rpcErr);
                }
                else {
                    timeout.reject(new RpcError("rpcError" /* e_awaitRpcErrType.error */));
                }
            }
            else {
                timeout.resolve(msg);
            }
        }
    }
    else {
        let cmd = rpcMsg.cmd.split('.');
        let data = null;
        let hasErr = false;
        try {
            data = await msgHandler[cmd[0]][cmd[1]](...msg);
        }
        catch (e) {
            hasErr = true;
            process.nextTick(() => {
                throw e;
            });
        }
        if (!rpcMsg.id) {
            return;
        }
        if (data === undefined) {
            data = null;
        }
        let bufEnd = getRpcMsg({ "id": rpcMsg.id, "err": hasErr ? 1 : undefined }, Buffer.from(JSON.stringify(data)), 6 /* define.Rpc_Msg.rpcMsgAwait */);
        sendTo(sid, null, bufEnd);
    }
}
exports.handleMsgAwait = handleMsgAwait;
/**
 * rpc structure
 */
class rpc_create {
    constructor() {
        this.toId = "";
        this.notify = false;
        this.rpcObj = {};
        this.loadRemoteMethod();
    }
    loadRemoteMethod() {
        let self = this;
        app.rpc = this.rpcFunc.bind(this);
        let tmp_rpc_obj = this.rpcObj;
        let dirName = path.join(app.base, define.some_config.File_Dir.Servers);
        let exists = fs.existsSync(dirName);
        if (!exists) {
            return;
        }
        let thisSvrHandler = [];
        fs.readdirSync(dirName).forEach(function (serverName) {
            let needRpc = !app.noRpcMatrix[appUtil.getNoRpcKey(app.serverType, serverName)];
            if (!needRpc && serverName !== app.serverType) {
                return;
            }
            let remoteDirName = path.join(dirName, serverName, '/remote');
            let exists = fs.existsSync(remoteDirName);
            if (exists) {
                if (needRpc) {
                    tmp_rpc_obj[serverName] = {};
                }
                fs.readdirSync(remoteDirName).forEach(function (fileName) {
                    if (!fileName.endsWith(".js")) {
                        return;
                    }
                    let fileBasename = path.basename(fileName, '.js');
                    let remote = require(path.join(remoteDirName, fileName));
                    if (remote.default && typeof remote.default === "function") {
                        if (needRpc) {
                            tmp_rpc_obj[serverName][fileBasename] = self.initFunc(serverName, fileBasename, remote.default.prototype, Object.getOwnPropertyNames(remote.default.prototype));
                        }
                        if (serverName === app.serverType) {
                            thisSvrHandler.push({ "filename": fileBasename, "con": remote.default });
                        }
                    }
                });
            }
        });
        for (let one of thisSvrHandler) {
            msgHandler[one.filename] = new one.con(app);
        }
    }
    rpcFunc(serverId, notify = false) {
        this.toId = serverId;
        this.notify = notify;
        return this.rpcObj;
    }
    initFunc(serverType, filename, func, funcFields) {
        let res = {};
        for (let field of funcFields) {
            if (field !== "constructor" && typeof func[field] === "function") {
                res[field] = this.proxyCb({ "serverType": serverType, "file_method": filename + "." + field });
            }
        }
        return res;
    }
    proxyCb(cmd) {
        let self = this;
        let func = function (...args) {
            return self.send(self.toId, self.notify, cmd, args);
        };
        return func;
    }
    send(sid, notify, cmd, args) {
        if (sid === "*") {
            this.sendT(cmd, args);
            return;
        }
        return this.sendAwait(sid, notify, cmd, args);
    }
    /** 发送给某一类型的服务器 */
    sendT(cmd, args) {
        let servers = app.getServersByType(cmd.serverType);
        if (servers.length === 0) {
            return;
        }
        let msgBuf = Buffer.from(JSON.stringify(args));
        let bufEnd = getRpcMsg({ "cmd": cmd.file_method }, msgBuf, 6 /* define.Rpc_Msg.rpcMsgAwait */);
        for (let one of servers) {
            if (one.id === app.serverId) {
                sendRpcMsgToSelfAwait(cmd, msgBuf, true);
            }
            else {
                sendTo(one.id, null, bufEnd);
            }
        }
    }
    /** await 形式，发送给某一服务器 */
    sendAwait(sid, notify, cmd, args) {
        let msgBuf = Buffer.from(JSON.stringify(args));
        if (sid === app.serverId) {
            return sendRpcMsgToSelfAwait(cmd, msgBuf, notify);
        }
        let rpcMsg = {
            "cmd": cmd.file_method
        };
        let promise = undefined;
        let rpcTimeout = null;
        if (!notify) {
            let resolveFunc = null;
            let rejectFunc = null;
            promise = new Promise((resolve, reject) => {
                resolveFunc = resolve;
                rejectFunc = reject;
            });
            let rpcError = errStack ? new RpcError() : null;
            rpcTimeout = { "id": getRpcId(), "resolve": resolveFunc, "reject": rejectFunc, "time": outTime, "rpcErr": rpcError };
            rpcMsg.id = rpcTimeout.id;
        }
        let bufEnd = getRpcMsg(rpcMsg, msgBuf, 6 /* define.Rpc_Msg.rpcMsgAwait */);
        sendTo(sid, rpcTimeout, bufEnd);
        return promise;
    }
}
function sendTo(sid, rpcTimeout, buf) {
    let socket = app.rpcPool.getSocket(sid);
    if (socket) {
        if (rpcTimeout) {
            rpcRequest[rpcTimeout.id] = rpcTimeout;
        }
        socket.send(buf);
        return;
    }
    let queue = msgQueueDic[sid];
    if (!queue) {
        queue = [];
        msgQueueDic[sid] = queue;
    }
    queue.push({ "rpcTimeout": rpcTimeout, "buf": buf, "time": outTime - 3000 });
    if (queue.length > msgCacheCount) {
        for (let one of queue.splice(0, 20)) {
            if (one.rpcTimeout) {
                timeoutCall(one.rpcTimeout);
            }
        }
    }
}
/**
 * Get rpcId
 */
function getRpcId() {
    let id = rpcId++;
    if (rpcId > 99999999) {
        rpcId = 1;
    }
    return id;
}
/**
 * rpc timeout detection
 */
function checkTimeout() {
    let now = Date.now();
    for (let sid in msgQueueDic) {
        let queue = msgQueueDic[sid];
        let deleteCount = 0;
        for (let one of queue) {
            if (one.time < now) {
                deleteCount++;
            }
            else {
                break;
            }
        }
        if (deleteCount > 0) {
            for (let one of queue.splice(0, deleteCount)) {
                if (one.rpcTimeout) {
                    timeoutCall(one.rpcTimeout);
                }
            }
        }
    }
    for (let id in rpcRequest) {
        if (rpcRequest[id].time < now) {
            let one = rpcRequest[id];
            delete rpcRequest[id];
            timeoutCall(one);
        }
    }
}
function timeoutCall(one) {
    process.nextTick(() => {
        if (one.rpcErr) {
            one.rpcErr.setMsg("rpcTimeout" /* e_awaitRpcErrType.timeout */);
            one.reject(one.rpcErr);
        }
        else {
            one.reject(new RpcError("rpcTimeout" /* e_awaitRpcErrType.timeout */));
        }
    });
}
/**
 *  Send rpc message
 *
 *    [4]       [1]         [1]      [...]    [...]
 *  allMsgLen  msgType   rpcBufLen   rpcBuf   msgBuf
 */
function getRpcMsg(rpcMsg, msgBuf, t) {
    let rpcBuf = Buffer.from(JSON.stringify(rpcMsg));
    let buffEnd = Buffer.allocUnsafe(6 + rpcBuf.length + msgBuf.length);
    buffEnd.writeUInt32BE(buffEnd.length - 4, 0);
    buffEnd.writeUInt8(t, 4);
    buffEnd.writeUInt8(rpcBuf.length, 5);
    rpcBuf.copy(buffEnd, 6);
    msgBuf.copy(buffEnd, 6 + rpcBuf.length);
    return buffEnd;
}
/**
 * Send rpc message to this server await
 */
function sendRpcMsgToSelfAwait(cmd, msgBuf, notify) {
    let args = JSON.parse(msgBuf.toString());
    if (notify) {
        setImmediate(() => {
            let route = cmd.file_method.split('.');
            let file = msgHandler[route[0]];
            file[route[1]](...args);
        });
        return;
    }
    let resolveFunc = null;
    let rejectFunc = null;
    let promise = new Promise((resolve, reject) => {
        resolveFunc = resolve;
        rejectFunc = reject;
    });
    let rpcError = errStack ? new RpcError() : null;
    let id = getRpcId();
    rpcRequest[id] = { "id": id, "resolve": resolveFunc, "reject": rejectFunc, "time": outTime, "rpcErr": rpcError };
    process.nextTick(async () => {
        let route = cmd.file_method.split('.');
        let file = msgHandler[route[0]];
        let data = null;
        let hasErr = false;
        try {
            data = await file[route[1]](...args);
        }
        catch (e) {
            hasErr = true;
            process.nextTick(() => {
                throw e;
            });
        }
        let timeout = rpcRequest[id];
        if (!timeout) {
            return;
        }
        delete rpcRequest[id];
        if (hasErr) {
            if (timeout.rpcErr) {
                timeout.rpcErr.setMsg("rpcError" /* e_awaitRpcErrType.error */);
                timeout.reject(timeout.rpcErr);
            }
            else {
                timeout.reject(new RpcError("rpcError" /* e_awaitRpcErrType.error */));
            }
        }
        else {
            if (data === undefined) {
                data = null;
            }
            timeout.resolve(JSON.parse(JSON.stringify(data)));
        }
    });
    return promise;
}
class RpcError extends Error {
    constructor(message) {
        super(message);
    }
    setMsg(message) {
        this.message = message;
    }
}
exports.RpcError = RpcError;
